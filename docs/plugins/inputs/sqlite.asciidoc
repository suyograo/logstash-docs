[[plugins-inputs-sqlite]]
=== sqlite


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/plugin install logstash-input-sqlite`.


Read rows from an sqlite database.

This is most useful in cases where you are logging directly to a table.
Any tables being watched must have an `id` column that is monotonically
increasing.

All tables are read by default except:

* ones matching `sqlite_%` - these are internal/adminstrative tables for sqlite
* `since_table` - this is used by this plugin to track state.

Example
[source,sql]
    % sqlite /tmp/example.db
    sqlite> CREATE TABLE weblogs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ip STRING,
        request STRING,
        response INTEGER);
    sqlite> INSERT INTO weblogs (ip, request, response) 
        VALUES ("1.2.3.4", "/index.html", 200);

Then with this logstash config:
[source,ruby]
    input {
      sqlite {
        path => "/tmp/example.db"
        type => weblogs
      }
    }
    output {
      stdout {
        debug => true
      }
    }

Sample output:
[source,ruby]
    {
      "@source"      => "sqlite://sadness/tmp/x.db",
      "@tags"        => [],
      "@fields"      => {
        "ip"       => "1.2.3.4",
        "request"  => "/index.html",
        "response" => 200
      },
      "@timestamp"   => "2013-05-29T06:16:30.850Z",
      "@source_host" => "sadness",
      "@source_path" => "/tmp/x.db",
      "@message"     => "",
      "@type"        => "foo"
    }


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
sqlite {
    path => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-sqlite-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-sqlite-batch>> |<<number,number>>|No|`5`
| <<plugins-inputs-sqlite-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-sqlite-exclude_tables>> |<<array,array>>|No|`[]`
| <<plugins-inputs-sqlite-path>> |<<string,string>>|Yes|
| <<plugins-inputs-sqlite-tags>> |<<array,array>>|No|
| <<plugins-inputs-sqlite-type>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-sqlite-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-sqlite-batch]]
===== `batch` 

  * Value type is <<number,number>>
  * Default value is `5`

How many rows to fetch at a time from each `SELECT` call.

[[plugins-inputs-sqlite-charset]]
===== `charset`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  <li> Value type is <<string,string>>
  * There is no default value for this setting.

The character encoding used in this input. Examples include `UTF-8`
and `cp1252`

This setting is useful if your log files are in `Latin-1` (aka `cp1252`)
or in another character set other than `UTF-8`.

This only affects `plain` format logs since json is `UTF-8` already.

[[plugins-inputs-sqlite-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-sqlite-debug]]
===== `debug`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<boolean,boolean>>
  * Default value is `false`



[[plugins-inputs-sqlite-exclude_tables]]
===== `exclude_tables` 

  * Value type is <<array,array>>
  * Default value is `[]`

Any tables to exclude by name.
By default all tables are followed.

[[plugins-inputs-sqlite-format]]
===== `format`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value can be any of: `plain`, `json`, `json_event`, `msgpack_event`
  * There is no default value for this setting.

The format of input data (plain, json, json_event)

[[plugins-inputs-sqlite-message_format]]
===== `message_format`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<string,string>>
  * There is no default value for this setting.

If format is `json`, an event `sprintf` string to build what
the display `@message` should be given (defaults to the raw JSON).
`sprintf` format strings look like `%{fieldname}`

If format is `json_event`, ALL fields except for `@type`
are expected to be present. Not receiving all fields
will cause unexpected results.

[[plugins-inputs-sqlite-path]]
===== `path` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The path to the sqlite database file.

[[plugins-inputs-sqlite-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-sqlite-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.



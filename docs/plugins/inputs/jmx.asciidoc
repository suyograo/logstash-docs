[[plugins-inputs-jmx]]
=== jmx


NOTE: This is a community-maintained plugin! It does not ship with Logstash by default, but it is easy to install by running `bin/plugin install logstash-input-jmx`.


This input plugin permits to retrieve metrics from remote Java applications using JMX.
Every `polling_frequency`, it scans a folder containing json configuration 
files describing JVMs to monitor with metrics to retrieve.
Then a pool of threads will retrieve metrics and create events.

## The configuration:

In Logstash configuration, you must set the polling frequency,
the number of thread used to poll metrics and a directory absolute path containing
json files with the configuration per jvm of metrics to retrieve.
Logstash input configuration example:
[source,ruby]
    jmx {
      //Required
      path => "/apps/logstash_conf/jmxconf"
      //Optional, default 60s
      polling_frequency => 15
      type => "jmx"
      //Optional, default 4
      nb_thread => 4
    }

Json JMX configuration example:
[source,js]
    {
      //Required, JMX listening host/ip
      "host" : "192.168.1.2",
      //Required, JMX listening port
      "port" : 1335,
      //Optional, the username to connect to JMX
      "username" : "user",
      //Optional, the password to connect to JMX
      "password": "pass",
      //Optional, use this alias as a prefix in the metric name. If not set use <host>_<port>
      "alias" : "test.homeserver.elasticsearch",
      //Required, list of JMX metrics to retrieve
      "queries" : [
      {
        //Required, the object name of Mbean to request
        "object_name" : "java.lang:type=Memory",
        //Optional, use this alias in the metrics value instead of the object_name
        "object_alias" : "Memory"
      }, {
        "object_name" : "java.lang:type=Runtime",
        //Optional, set of attributes to retrieve. If not set retrieve
        //all metrics available on the configured object_name.
        "attributes" : [ "Uptime", "StartTime" ],
        "object_alias" : "Runtime"
      }, {
        //object_name can be configured with * to retrieve all matching Mbeans
        "object_name" : "java.lang:type=GarbageCollector,name=*",
        "attributes" : [ "CollectionCount", "CollectionTime" ],
        //object_alias can be based on specific value from the object_name thanks to ${<varname>}.
        //In this case ${type} will be replaced by GarbageCollector...
        "object_alias" : "${type}.${name}"
      }, {
        "object_name" : "java.nio:type=BufferPool,name=*",
        "object_alias" : "${type}.${name}"
      } ]
    }

Here are examples of generated events. When returned metrics value type is 
number/boolean it is stored in `metric_value_number` event field
otherwise it is stored in `metric_value_string` event field.
[source,ruby]
    {
      "@version" => "1",
      "@timestamp" => "2014-02-18T20:57:27.688Z",
      "host" => "192.168.1.2",
      "path" => "/apps/logstash_conf/jmxconf",
      "type" => "jmx",
      "metric_path" => "test.homeserver.elasticsearch.GarbageCollector.ParNew.CollectionCount",
      "metric_value_number" => 2212
    }

[source,ruby]
    {
      "@version" => "1",
      "@timestamp" => "2014-02-18T20:58:06.376Z",
      "host" => "localhost",
      "path" => "/apps/logstash_conf/jmxconf",
      "type" => "jmx",
      "metric_path" => "test.homeserver.elasticsearch.BufferPool.mapped.ObjectName",
      "metric_value_string" => "java.nio:type=BufferPool,name=mapped"
    }


&nbsp;

==== Synopsis

This plugin supports the following configuration options:


Required configuration options:

[source,json]
--------------------------
jmx {
    path => ...
}
--------------------------



Available configuration options:

[cols="<,<,<,<m",options="header",]
|=======================================================================
|Setting |Input type|Required|Default value
| <<plugins-inputs-jmx-add_field>> |<<hash,hash>>|No|`{}`
| <<plugins-inputs-jmx-codec>> |<<codec,codec>>|No|`"plain"`
| <<plugins-inputs-jmx-nb_thread>> |<<number,number>>|No|`4`
| <<plugins-inputs-jmx-path>> |<<string,string>>|Yes|
| <<plugins-inputs-jmx-polling_frequency>> |<<number,number>>|No|`60`
| <<plugins-inputs-jmx-tags>> |<<array,array>>|No|
| <<plugins-inputs-jmx-type>> |<<string,string>>|No|
|=======================================================================



==== Details

&nbsp;

[[plugins-inputs-jmx-add_field]]
===== `add_field` 

  * Value type is <<hash,hash>>
  * Default value is `{}`

Add a field to an event

[[plugins-inputs-jmx-charset]]
===== `charset`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  <li> Value type is <<string,string>>
  * There is no default value for this setting.

The character encoding used in this input. Examples include `UTF-8`
and `cp1252`

This setting is useful if your log files are in `Latin-1` (aka `cp1252`)
or in another character set other than `UTF-8`.

This only affects `plain` format logs since json is `UTF-8` already.

[[plugins-inputs-jmx-codec]]
===== `codec` 

  * Value type is <<codec,codec>>
  * Default value is `"plain"`

The codec used for input data. Input codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your Logstash pipeline.

[[plugins-inputs-jmx-debug]]
===== `debug`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<boolean,boolean>>
  * Default value is `false`



[[plugins-inputs-jmx-format]]
===== `format`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value can be any of: `plain`, `json`, `json_event`, `msgpack_event`
  * There is no default value for this setting.

The format of input data (plain, json, json_event)

[[plugins-inputs-jmx-message_format]]
===== `message_format`  (DEPRECATED)

  * DEPRECATED WARNING: This configuration item is deprecated and may not be available in future versions.
  * Value type is <<string,string>>
  * There is no default value for this setting.

If format is `json`, an event `sprintf` string to build what
the display `@message` should be given (defaults to the raw JSON).
`sprintf` format strings look like `%{fieldname}`

If format is `json_event`, ALL fields except for `@type`
are expected to be present. Not receiving all fields
will cause unexpected results.

[[plugins-inputs-jmx-nb_thread]]
===== `nb_thread` 

  * Value type is <<number,number>>
  * Default value is `4`

Indicate number of thread launched to retrieve metrics

[[plugins-inputs-jmx-path]]
===== `path` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

Path where json conf files are stored

[[plugins-inputs-jmx-polling_frequency]]
===== `polling_frequency` 

  * Value type is <<number,number>>
  * Default value is `60`

Indicate interval between two jmx metrics retrieval
(in s)

[[plugins-inputs-jmx-tags]]
===== `tags` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

Add any number of arbitrary tags to your event.

This can help with processing later.

[[plugins-inputs-jmx-type]]
===== `type` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Add a `type` field to all events handled by this input.

Types are used mainly for filter activation.

The type is stored as part of the event itself, so you can
also use the type to search for it in Kibana.

If you try to set a type on an event that already has one (for
example when you send an event from a shipper to an indexer) then
a new input will not override the existing type. A type set at
the shipper stays with that event for its life even
when sent to another Logstash server.


